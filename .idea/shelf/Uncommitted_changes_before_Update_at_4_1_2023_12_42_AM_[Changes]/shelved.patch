Index: app/src/main/java/my/edu/tarc/hungerhub/ui/home/LoginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package my.edu.tarc.hungerhub.ui.home\r\n\r\n\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.DatabaseReference\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport my.edu.tarc.hungerhub.R\r\nimport my.edu.tarc.hungerhub.databinding.FragmentLoginBinding\r\n\r\n@Suppress(\"UNREACHABLE_CODE\")\r\nclass LoginFragment : Fragment() {\r\n    private lateinit var database:FirebaseDatabase\r\n    private lateinit var reference:DatabaseReference\r\n    private var _binding: FragmentLoginBinding? = null\r\n    private val binding get() = _binding!!\r\n    private lateinit var firebaseAuth: FirebaseAuth\r\n    //val User = User(\"hello\",\"123456\")\r\n    //private lateinit var database: DatabaseReference\r\n    val password = \"123123\"\r\n    val email = \"pinkkting@gmail.com\"\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentLoginBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n\r\n        binding.buttonSignIn.setOnClickListener{\r\n            if(binding.editTextLogInEmail.text.isEmpty()){\r\n                binding.editTextLogInEmail.setError(getString(R.string.emailrequired))\r\n                return@setOnClickListener\r\n            }\r\n            if(binding.editTextLogInPassword.text.isEmpty()){\r\n                binding.editTextLogInPassword.setError(getString(R.string.passwordrequired))\r\n                return@setOnClickListener\r\n            }\r\n            if(binding.editTextLogInEmail.text.toString() == email && binding.editTextLogInPassword.text.toString() == password ){\r\n//                firebaseAuth.createUserWithEmailAndPassword(email, password).addOnCompleteListener {\r\n//                    if(it.isSuccessful){\r\n//\r\n//                        findNavController().navigate(R.id.action_loginFragment_to_nav_request2)\r\n//\r\n//                    }\r\n//                }\r\n                val snack = Snackbar.make(it,\"Login Success!\", Snackbar.LENGTH_LONG)\r\n                snack.show()\r\n                findNavController().navigate(R.id.action_loginFragment_to_nav_request2)\r\n            }else{\r\n                val snack = Snackbar.make(it,\"Invalid email/Password!\", Snackbar.LENGTH_LONG)\r\n                snack.show()\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/my/edu/tarc/hungerhub/ui/home/LoginFragment.kt b/app/src/main/java/my/edu/tarc/hungerhub/ui/home/LoginFragment.kt
--- a/app/src/main/java/my/edu/tarc/hungerhub/ui/home/LoginFragment.kt	
+++ b/app/src/main/java/my/edu/tarc/hungerhub/ui/home/LoginFragment.kt	
@@ -1,11 +1,13 @@
 package my.edu.tarc.hungerhub.ui.home
 
 
+import android.content.Context
+import android.content.SharedPreferences
 import android.os.Bundle
-import androidx.fragment.app.Fragment
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import androidx.fragment.app.Fragment
 import androidx.navigation.fragment.findNavController
 import com.google.android.material.snackbar.Snackbar
 import com.google.firebase.auth.FirebaseAuth
@@ -14,6 +16,7 @@
 import my.edu.tarc.hungerhub.R
 import my.edu.tarc.hungerhub.databinding.FragmentLoginBinding
 
+
 @Suppress("UNREACHABLE_CODE")
 class LoginFragment : Fragment() {
     private lateinit var database:FirebaseDatabase
@@ -55,6 +58,20 @@
 //
 //                    }
 //                }
+
+                // create shared preference for login account details
+                val sharedPref = activity?.getSharedPreferences("Login", Context.MODE_PRIVATE)
+                if (sharedPref != null) {
+                    with(sharedPref.edit()) {
+                        this?.clear()
+                        this?.apply()
+                    }
+                }
+                with (sharedPref?.edit()) {
+                    this?.putString(getString(R.string.email), binding.editTextLogInEmail.text.toString())
+                    this?.apply()
+                }
+
                 val snack = Snackbar.make(it,"Login Success!", Snackbar.LENGTH_LONG)
                 snack.show()
                 findNavController().navigate(R.id.action_loginFragment_to_nav_request2)
Index: app/src/main/java/my/edu/tarc/hungerhub/model/Request.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package my.edu.tarc.hungerhub.model\r\n\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\n\r\n@Entity\r\ndata class Request (\r\n    @PrimaryKey var date: String,\r\n    var income: Int,\r\n    var jobStatus: String,\r\n    var maritalStatus: String,\r\n    var pax: Int,\r\n    var reason: String,\r\n    var approvalStatus: String\r\n    )
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/my/edu/tarc/hungerhub/model/Request.kt b/app/src/main/java/my/edu/tarc/hungerhub/model/Request.kt
--- a/app/src/main/java/my/edu/tarc/hungerhub/model/Request.kt	
+++ b/app/src/main/java/my/edu/tarc/hungerhub/model/Request.kt	
@@ -6,6 +6,13 @@
 @Entity
 data class Request (
     @PrimaryKey var date: String,
+    var name: String,
+    var ic: String,
+    var phoneNo: String,
+    var loginEmail: String,
+    var address: String,
+    var postcode: String,
+    var state: String,
     var income: Int,
     var jobStatus: String,
     var maritalStatus: String,
Index: app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package my.edu.tarc.hungerhub.ui.request\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.icu.text.SimpleDateFormat\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport my.edu.tarc.hungerhub.R\r\nimport my.edu.tarc.hungerhub.databinding.FragmentRequestBinding\r\nimport my.edu.tarc.hungerhub.model.Request\r\nimport my.edu.tarc.hungerhub.model.RequestViewModel\r\nimport java.util.Calendar\r\n\r\nclass RequestFragment: Fragment() {\r\n\r\n    private var _binding: FragmentRequestBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private val requestViewModel: RequestViewModel by viewModels()\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentRequestBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    @RequiresApi(Build.VERSION_CODES.N)\r\n    override fun onStart() {\r\n        super.onStart()\r\n\r\n        // open and close TNC popup card view\r\n        binding.textViewTnc.setOnClickListener {\r\n            binding.cardViewTnc.isVisible = true\r\n        }\r\n        binding.imageButtonCloseTnc.setOnClickListener {\r\n            binding.cardViewTnc.isVisible = false\r\n        }\r\n        binding.buttonAgree.setOnClickListener {\r\n            binding.checkBoxTnc.isChecked = true\r\n            binding.cardViewTnc.isVisible = false\r\n        }\r\n\r\n        binding.buttonSubmit.setOnClickListener {\r\n            // check empty fields\r\n            if (binding.spinnerMarital.selectedItemPosition == 0) {\r\n                Snackbar.make(this.requireView(), getString(R.string.marital_required), Snackbar.LENGTH_SHORT).show()\r\n                return@setOnClickListener\r\n            }\r\n            if (binding.spinnerJob.selectedItemPosition == 0) {\r\n                Snackbar.make(this.requireView(), getString(R.string.job_required), Snackbar.LENGTH_SHORT).show()\r\n                return@setOnClickListener\r\n            }\r\n            if (binding.editTextIncome.text.toString().isEmpty()) {\r\n                binding.editTextIncome.error = getString(R.string.value_required)\r\n                return@setOnClickListener\r\n            }\r\n            if (binding.editTextReason.text.toString().isEmpty()) {\r\n                binding.editTextReason.error = getString(R.string.value_required)\r\n                return@setOnClickListener\r\n            }\r\n            if (binding.editTextPax.text.toString().isEmpty()) {\r\n                binding.editTextPax.error = getString(R.string.value_required)\r\n                return@setOnClickListener\r\n            }\r\n\r\n            // validate pax amount\r\n            if (binding.editTextPax.text.toString().toInt() > 10) {\r\n                binding.editTextPax.error = getString(R.string.invalid_pax)\r\n                return@setOnClickListener\r\n            }\r\n\r\n            // check agreement of TNC\r\n            if (!binding.checkBoxTnc.isChecked) {\r\n                Snackbar.make(this.requireView(), getString(R.string.tnc_required), Snackbar.LENGTH_SHORT).show()\r\n                return@setOnClickListener\r\n            }\r\n\r\n            // alert dialog to prompt confirmation\r\n            val builder = AlertDialog.Builder(this.requireContext())\r\n            builder.setTitle(R.string.dialog_title)\r\n            builder.setMessage(R.string.dialog_message)\r\n            builder.setIcon(R.drawable.alert)\r\n\r\n            // TODO: maybe 1 time a week?\r\n            // press submit in dialog\r\n            builder.setPositiveButton(R.string.submit) { _, _ ->\r\n                val reference = FirebaseDatabase.getInstance().getReference(getString(R.string.firebase_req))\r\n\r\n                // get submit date and time\r\n                val dateFormat = \"yyyy/MM/dd HH:mm:ss\"\r\n                val calendar = Calendar.getInstance()\r\n                val format = SimpleDateFormat(dateFormat)\r\n                val time = format.format(calendar.time)\r\n\r\n                val request = Request(time,\r\n                    binding.editTextIncome.text.toString().toInt(),\r\n                    binding.spinnerJob.selectedItem.toString(),\r\n                    binding.spinnerMarital.selectedItem.toString(),\r\n                    binding.editTextPax.text.toString().toInt(),\r\n                    binding.editTextReason.text.toString(),\r\n                    getString(R.string.pending)\r\n                )\r\n\r\n                // save data in firebase and DAO database\r\n                reference.child(time).setValue(request)\r\n                requestViewModel.insert(request)\r\n\r\n                Snackbar.make(this.requireActivity().findViewById(R.id.constraintLayout_request),\r\n                    getString(R.string.form_submitted), Snackbar.LENGTH_SHORT).show()\r\n\r\n                findNavController().navigateUp()\r\n            }\r\n\r\n            // press cancel in dialog\r\n            builder.setNeutralButton(R.string.cancel) { _, _ ->\r\n                Toast.makeText(this.requireContext(), R.string.action_cancelled, Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n            val alertDialog: AlertDialog = builder.create()\r\n            alertDialog.setCancelable(false)\r\n            alertDialog.show()\r\n        }\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestFragment.kt b/app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestFragment.kt
--- a/app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestFragment.kt	
+++ b/app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestFragment.kt	
@@ -2,20 +2,26 @@
 
 import android.annotation.SuppressLint
 import android.app.AlertDialog
+import android.content.Context
 import android.icu.text.SimpleDateFormat
 import android.os.Build
 import android.os.Bundle
+import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
 import android.widget.Toast
+import androidx.annotation.NonNull
 import androidx.annotation.RequiresApi
 import androidx.core.view.isVisible
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.viewModels
 import androidx.navigation.fragment.findNavController
 import com.google.android.material.snackbar.Snackbar
+import com.google.firebase.database.DataSnapshot
+import com.google.firebase.database.DatabaseError
 import com.google.firebase.database.FirebaseDatabase
+import com.google.firebase.database.ValueEventListener
 import my.edu.tarc.hungerhub.R
 import my.edu.tarc.hungerhub.databinding.FragmentRequestBinding
 import my.edu.tarc.hungerhub.model.Request
@@ -94,10 +100,10 @@
             builder.setMessage(R.string.dialog_message)
             builder.setIcon(R.drawable.alert)
 
-            // TODO: maybe 1 time a week?
             // press submit in dialog
             builder.setPositiveButton(R.string.submit) { _, _ ->
-                val reference = FirebaseDatabase.getInstance().getReference(getString(R.string.firebase_req))
+                val referenceReq = FirebaseDatabase.getInstance().getReference(getString(R.string.firebase_req))
+                val referenceUser = FirebaseDatabase.getInstance().getReference(getString(R.string.firebase_user))
 
                 // get submit date and time
                 val dateFormat = "yyyy/MM/dd HH:mm:ss"
@@ -105,18 +111,46 @@
                 val format = SimpleDateFormat(dateFormat)
                 val time = format.format(calendar.time)
 
-                val request = Request(time,
-                    binding.editTextIncome.text.toString().toInt(),
-                    binding.spinnerJob.selectedItem.toString(),
-                    binding.spinnerMarital.selectedItem.toString(),
-                    binding.editTextPax.text.toString().toInt(),
-                    binding.editTextReason.text.toString(),
-                    getString(R.string.pending)
-                )
+                // get user data
+                val sharedPref = activity?.getSharedPreferences("Login", Context.MODE_PRIVATE)
+                val loginEmail = sharedPref?.getString(R.string.email.toString(), null)
+                val findUser = referenceUser.orderByChild("email").equalTo(loginEmail)
+
+                findUser.addListenerForSingleValueEvent(object: ValueEventListener {
+                    override fun onDataChange(dataSnapshot: DataSnapshot) {
+                        if (dataSnapshot.exists()) {
+                            val children = loginEmail?.let { it1 -> dataSnapshot.child(it1) }
+                            val name = children?.child("name")?.value.toString()
+                            val ic = children?.child("ic")?.value.toString()
+                            val phoneNo = children?.child("phoneNo")?.value.toString()
+                            val address = children?.child("address")?.value.toString()
+                            val postcode = children?.child("posCode")?.value.toString()
+                            val state = children?.child("state")?.value.toString()
+
+                            val request = loginEmail?.let { it1 ->
+                                Request(
+                                    time, name, ic, phoneNo, it1, address, postcode, state,
+                                    binding.editTextIncome.text.toString().toInt(),
+                                    binding.spinnerJob.selectedItem.toString(),
+                                    binding.spinnerMarital.selectedItem.toString(),
+                                    binding.editTextPax.text.toString().toInt(),
+                                    binding.editTextReason.text.toString(),
+                                    getString(R.string.pending)
+                                )
+                            }
 
-                // save data in firebase and DAO database
-                reference.child(time).setValue(request)
-                requestViewModel.insert(request)
+                            // save data in firebase and room database
+                            referenceReq.child(time).setValue(request)
+                            if (request != null) {
+                                requestViewModel.insert(request)
+                            }
+                        }
+                    }
+
+                    override fun onCancelled(databaseError: DatabaseError) {
+                        Log.e("firebase", "firebase error")
+                    }
+                })
 
                 Snackbar.make(this.requireActivity().findViewById(R.id.constraintLayout_request),
                     getString(R.string.form_submitted), Snackbar.LENGTH_SHORT).show()
Index: app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestStatusFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package my.edu.tarc.hungerhub.ui.request\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.app.DatePickerDialog\r\nimport android.content.DialogInterface\r\nimport android.os.Bundle\r\nimport android.view.*\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport my.edu.tarc.hungerhub.R\r\nimport my.edu.tarc.hungerhub.adapter.RequestAdapter\r\nimport my.edu.tarc.hungerhub.databinding.FragmentRequestStatusBinding\r\nimport my.edu.tarc.hungerhub.model.RequestViewModel\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass RequestStatusFragment: Fragment() {\r\n\r\n    private var _binding: FragmentRequestStatusBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private val requestViewModel: RequestViewModel by viewModels()\r\n    private val requestAdapter = RequestAdapter()\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentRequestStatusBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // check for changes of live data\r\n        requestViewModel.requestList.observe(viewLifecycleOwner) {\r\n            requestAdapter.setForm(it)\r\n            checkRecordNum()\r\n        }\r\n\r\n        with(binding.recyclerViewStatus) {\r\n            layoutManager = LinearLayoutManager(requireActivity())\r\n            adapter = requestAdapter\r\n        }\r\n\r\n        // add request button\r\n        binding.floatingActionButtonAddForm.setOnClickListener {\r\n            findNavController().navigate(R.id.action_nav_request_to_RequestFragment)\r\n        }\r\n\r\n        binding.floatingActionButtonFilter.setOnClickListener {\r\n            val builder = AlertDialog.Builder(this.requireContext())\r\n            builder.setTitle(R.string.filter_by)\r\n            builder.setIcon(R.drawable.ic_baseline_filter_alt_24)\r\n\r\n            val filterBy = arrayOf(\"Day\", \"Month\", \"Year\")\r\n            builder.setItems(filterBy, DialogInterface.OnClickListener { _, which ->\r\n                val calendar = Calendar.getInstance()\r\n                val dateSetListener = DatePickerDialog.OnDateSetListener { _, year, month, day ->\r\n                    calendar.set(Calendar.YEAR, year)\r\n                    calendar.set(Calendar.MONTH, month)\r\n                    calendar.set(Calendar.DAY_OF_MONTH, day)\r\n\r\n                    var dateFormat = \"\"\r\n                    when (which) {\r\n                        0 -> dateFormat = \"yyyy/MM/dd\"\r\n                        1 -> dateFormat = \"yyyy/MM\"\r\n                        2 -> dateFormat = \"yyyy\"\r\n                    }\r\n\r\n                    val standardFormat = SimpleDateFormat(dateFormat)\r\n                    val selectedDate = standardFormat.format(calendar.time)\r\n\r\n                    val queryList = requestViewModel.filterByDate(selectedDate)\r\n                    requestAdapter.setForm(queryList)\r\n\r\n                    Toast.makeText(this.requireContext(), (getString(R.string.show_record) + \" \" + selectedDate), Toast.LENGTH_SHORT).show()\r\n\r\n                    checkRecordNum()\r\n                }\r\n\r\n                this.context?.let {\r\n                    DatePickerDialog(\r\n                        it,\r\n                        dateSetListener,\r\n                        calendar.get(Calendar.YEAR),\r\n                        calendar.get(Calendar.MONTH),\r\n                        calendar.get(Calendar.DAY_OF_MONTH)\r\n                    ).show()\r\n                }\r\n            })\r\n\r\n            builder.setPositiveButton(R.string.remove_filter) { _, _ ->\r\n                val unfilteredList = requestViewModel.removeFilter()\r\n                requestAdapter.setForm(unfilteredList)\r\n                checkRecordNum()\r\n\r\n                Toast.makeText(this.requireContext(), R.string.remove_filter_msg, Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n            builder.setNeutralButton(R.string.cancel) { _, _ ->\r\n                Toast.makeText(this.requireContext(), R.string.action_cancelled, Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n            val alertDialog: AlertDialog = builder.create()\r\n            alertDialog.setCancelable(false)\r\n            alertDialog.show()\r\n        }\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n    private fun checkRecordNum() {\r\n        if (binding.recyclerViewStatus.adapter?.itemCount == 0) {\r\n            binding.textViewEmpty.text = getString(R.string.no_record)\r\n        } else {\r\n            binding.textViewEmpty.text = \"\"\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestStatusFragment.kt b/app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestStatusFragment.kt
--- a/app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestStatusFragment.kt	
+++ b/app/src/main/java/my/edu/tarc/hungerhub/ui/request/RequestStatusFragment.kt	
@@ -16,8 +16,7 @@
 import my.edu.tarc.hungerhub.databinding.FragmentRequestStatusBinding
 import my.edu.tarc.hungerhub.model.RequestViewModel
 import java.text.SimpleDateFormat
-import java.util.*
-
+import java.util.Calendar
 
 class RequestStatusFragment: Fragment() {
 
